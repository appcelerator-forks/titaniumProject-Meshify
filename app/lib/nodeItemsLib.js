// Generated by CoffeeScript 1.6.2
var buildModels, _this = this;

buildModels = function(dataObj, buildview, refreshControl) {
    var count, listlen, nodes, obj, _i, _len, _ref, _results;

    nodes = Alloy.Collections.nodes;
    listlen = dataObj.list.length;
    count = 0;
    Alloy.headers = 0;
    _ref = dataObj.list;
    _results = [];
    for ( _i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        _results.push((function(obj) {
            var client, macaddress, url;

            obj.models = new Array();
            macaddress = encodeURIComponent(obj.gateway.macaddress);
            url = Alloy.Globals.rootURL + "/api/gateway?macaddress=" + macaddress;
            Ti.API.info("Data URL=========================");
			Ti.API.info(url);            
            client = Ti.Network.createHTTPClient({
                onload : function(e) {
                    var data, datatemp, obja, _j, _len1;

                    data = JSON.parse(this.responseText);
                    if (data.isAuthenticated === false) {
                        alert("Please Log In");
                        Ti.App.fireEvent("logout");
                        return;
                    }
                    datatemp = {
                        "labelData" : {
                            "zip" : obj.address.zip,
                            "state" : obj.address.state,
                            "address" : obj.address.street1,
                            "city" : obj.address.city,
                            "first" : obj.person.first,
                            "nodetemplate" : "nodeRowHeader",
                            "last" : obj.person.last,
                            "phone1" : obj.person.phone1,
                            "mac" : obj.gateway.macaddress
                        }
                    };
                    datatemp = datatemp.labelData;
                    obj.models.push(datatemp);
                    for ( _j = 0, _len1 = data.length; _j < _len1; _j++) {
                        obja = data[_j];
                        obja.template = "nodeRow";
                        obja.person = new Object;
                        obja.person = obj.person;
                        obja.address = new Object;
                        obja.address = obj.address;
                        if (obja.nodetemplate !== "mainMistaway") {
                            obj.models.push(obja);
                        }
                    }
                    count += 1;
                    if (count >= listlen) {
                        buildview(dataObj.list);
                    }
                },
                onerror : function(e) {
                    Ti.API.info(e.error);
                    if (OS_IOS) {
                        // refreshControl.endRefreshing();
                    }
                    Alloy.Globals.hideIndicator();
                    return "error";
                },
                timeout : 35000
            });
            client.open("GET", url);
            return client.send();
        })(obj));
    }
    return _results;
};

exports.getdata = function(buildview, searchTerm, systemTypes, problemStatuses, customGroups, pageIndex, pageSize, refreshControl) {
    var alertDialog, client, url;
    Alloy.Globals.showIndicator();
    if (Titanium.Network.networkType === Titanium.Network.NETWORK_NONE) {
        if (OS_IOS) {
            // refreshControl.endRefreshing();
        }
        Alloy.Globals.hideIndicator();
        alertDialog = Titanium.UI.createAlertDialog({
            title : "WARNING!",
            message : "Your device is not online.",
            buttonNames : ["OK"]
        });
        return alertDialog.show();
    } else {
        searchTerm = encodeURIComponent(searchTerm);
        systemTypes = encodeURIComponent(systemTypes);
        problemStatuses = encodeURIComponent(problemStatuses);
        customGroups = encodeURIComponent(customGroups);
        pageIndex = encodeURIComponent(pageIndex);
        pageSize = encodeURIComponent(pageSize);
        url = Alloy.Globals.rootURL + "/api/Locations?term=" + searchTerm +  "&problemStatuses=" + problemStatuses + "&customGroups=" + customGroups + "&pageIndex=" + pageIndex + "&pageSize=" + pageSize;
        Ti.API.info("URL ==========================");
        Ti.API.info(url);
        
        client = Ti.Network.createHTTPClient({
            onload : function(e) {
                var data, dataObj, node, _i, _len;

                data = JSON.parse(this.responseText);
                
                dataObj = new Object;
                dataObj.list = [];
                data = data.CurrentPageListItems;
                if (data.isAuthenticated === false) {
                    alert("Please Log In");
                    Ti.App.fireEvent("logout");
                    return;
                }
                if (data.length < 1) {
                    if (Alloy.Globals.isScollLoad === true) {
                        Alloy.Globals.isScollLoad = false;
                    } else {
                        Alloy.Globals.doSearch = false;
                    }
                    alert("No Search Results");
                    Alloy.Globals.searchObj = Alloy.Globals.lastSearchObj;
                    Alloy.Globals.hideIndicator();
                    if (OS_IOS) {
                        // refreshControl.endRefreshing();
                    }
                    return;
                }
                for ( _i = 0, _len = data.length; _i < _len; _i++) {
                    node = data[_i];
                    node.person.userRole = Alloy.userRole;
                    if (node.person.first === "") {
                        node.person.first = "unknown";
                    }
                    if (node.person.last === "") {
                        node.person.last = "unknown";
                    }
                    if (node.person.phone1 === "") {
                        node.person.phone1 = "000-000-0000";
                    }
                    if (node.address.city === "") {
                        node.address.city = "unknown";
                    }
                    if (node.address.state === "") {
                        node.address.state = "unknown";
                    }
                    if (node.address.street1 === "") {
                        node.address.street1 = "unknown";
                    }
                    if (node.address.zip === "") {
                        node.address.zip = "unknown";
                    }
                    dataObj.list.push(node);
                }
                buildModels(dataObj, buildview, refreshControl);
            },
            onerror : function(e) {
                Ti.API.info(e.error);
                Alloy.Globals.hideIndicator();
                if (OS_IOS) {
                    // refreshControl.endRefreshing();
                }
                return alert("Error Loading Data, Please Retry");
            },
            timeout : 35000
        });
        client.open("GET", url);
        return client.send();
    }
    
};
