// Generated by CoffeeScript 1.6.2
var setChannel;

setChannel = function(channels, macaddr, refresh) {
  var client, mac, sendData, url;

  mac = new Array;
  mac[0] = macaddr;
  url = Alloy.Globals.rootURL + "/api/channel";
  client = Ti.Network.createHTTPClient({
    onload: function(e) {
      var data, dialog, length, msg, title;

      try {
        data = JSON.parse(this.responseText);
      } catch (_error) {
        e = _error;
        Ti.API.info(e);
        Alloy.Globals.hideIndicator();
        alert("Error Sending Data, Please Try Again");
        return;
      }
      Ti.API.info(data);
      length = 0;
      try {
        if (data[0].erroronset) {
          length = 2;
        }
      } catch (_error) {
        e = _error;
        length = 0;
      }
      if (length > 0) {
        title = "Error Sending Data";
        msg = data[0].erroronset;
      } else {
        title = "SUCCESS";
        msg = "Success Sending the Command";
      }
      dialog = Ti.UI.createAlertDialog({
        message: msg,
        ok: "OK",
        title: title
      });
      try {
        if (refresh === "false") {
          return;
        }
      } catch (_error) {
        e = _error;
        console.log(e);
      }
      dialog.show();
      dialog.addEventListener("click", function(e) {
        Ti.API.info(e);
        if (e.index === 0) {
          return refresh();
        }
      });
      Alloy.Globals.hideIndicator();
    },
    onerror: function(e) {
      Ti.API.info(e.error);
      Alloy.Globals.hideIndicator();
      return alert("Error Sending Data, Please Try Again");
    },
    timeout: 35000
  });
  client.open("POST", url);
  client.setRequestHeader("content-type", "application/json; charset=utf-8");
  sendData = JSON.stringify({
    macaddresses: [macaddr],
    channelDTO: channels
  });
  Ti.API.info(sendData);
  return client.send(sendData);
};

exports.setButton = function(channelId, techName, fullName, mac, value, refresh) {
  var Data, alertDialog, localobj;
/*
  Alloy.Globals.flurry.logEvent("set", {
    user: Ti.App.Properties.getString('username'),
    techName: techName,
    name: fullName,
    mac: mac,
    value: value,
    userLog: Ti.App.Properties.getString('username') + " " + techName + " " + fullName + " " + value
  });*/
  Alloy.Globals.showIndicator();
  if (Titanium.Network.networkType === Titanium.Network.NETWORK_NONE) {
    Alloy.Globals.hideIndicator();
    alertDialog = Titanium.UI.createAlertDialog({
      title: "WARNING!",
      message: "Your device is not online.",
      buttonNames: ["OK"]
    });
    return alertDialog.show();
  } else {
    Data = new Array;
    localobj = {
      ChannelId: channelId,
      value: value,
      techName: techName,
      name: fullName
    };
    Data[0] = localobj;
    return setChannel(Data, mac, refresh);
  }
};
